import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
# x=np.arange(6)
# y = x.reshape(2,3)
# print(y)
# z = x.reshape(-1,1)
# print(z)
# italy=cv2.imread("review_opencv/images/5.jpeg", 1)
# print(italy.shape)
# italy_street=cv2.resize(italy, None, fx=0.25, fy=0.25)
# print(italy_street.shape)
# italy_street_rgb=cv2.cvtColor(italy_street, cv2.COLOR_BGR2RGB)
# matrix = np.ones(italy_street_rgb.shape, dtype="uint8")*50
# # italy_street_brighter = cv2.add(italy_street_rgb, matrix)
# # italy_street_darker = cv2.subtract(italy_street_rgb, matrix)
# # cv2.imshow("Brighter Image", italy_street_brighter)
# # cv2.imshow("Darker Image", italy_street_darker)
# # cv2.waitKey(0)
# # cv2.destroyAllWindows()
# italy_street_gray = cv2.cvtColor(italy_street, cv2.COLOR_BGR2GRAY)
# ret, italy_street_global_threshold = cv2.threshold(italy_street_gray, 127, 255, cv2.THRESH_BINARY)
# italy_street_adaptive_threshold = cv2.adaptiveThreshold(italy_street_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
# cv2.imshow("Original Image", italy_street)
# cv2.imshow("Grayscale Image", italy_street_gray)
# cv2.imshow("Global Threshold Image", italy_street_global_threshold)
# cv2.imshow("Adaptive Threshold Image", italy_street_adaptive_threshold)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# matrix1 = np.ones(italy_street_rgb.shape) * 0.7
# matrix2 = np.ones(italy_street_rgb.shape) * 1.3
# italy_street_brighter = np.uint8(cv2.multiply(np.float64(italy_street_rgb), matrix2)) # float64 is used to avoid overflow and to increase precision
# italy_street_darker = np.uint8(cv2.multiply(np.float64(italy_street_rgb), matrix1)) # float64 is used to avoid overflow and to increase precision
# cv2.imshow("Brighter Image", italy_street_brighter)
# cv2.imshow("Darker Image", italy_street_darker)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# italy_street_bright = np.uint8(np.clip(cv2.multiply(np.float64(italy_street_rgb) ,matrix2), 0, 255))
# italy_street_dark = np.uint8(np.clip(cv2.multiply(np.float64(italy_street_rgb) ,matrix1), 0, 255))
# # italy_street_bright = np.uint8(np.clip(np.float64(italy_street_brighter), 0, 255)) # same result like above including overflow
# # italy_street_dark = np.uint8(np.clip(np.float64(italy_street_darker), 0, 255)) # same result like above including overflow
# cv2.imshow("Bright Image", italy_street_bright)
# cv2.imshow("Dark Image", italy_street_dark)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
img_rect = cv2.imread("review_opencv/images/rectangle.jpg", 1)
print(img_rect.shape)
img_cir = cv2.imread("review_opencv/images/circle.jpg", 1)
print(img_cir.shape)
# resizeimg_rect = cv2.resize(img_rect, (499, 200))
# cv2.imshow("show resized rectangle", resizeimg_rect)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
resizeimg_cir = cv2.resize(img_cir, (200, 499))
resizeimg_rect_gray = cv2.cvtColor(img_rect, cv2.COLOR_BGR2GRAY)
resizeimg_cir_gray = cv2.cvtColor(img_cir, cv2.COLOR_BGR2GRAY)
and_gray = cv2.bitwise_and(resizeimg_rect_gray, resizeimg_cir_gray, mask=None)
or_gray = cv2.bitwise_or(resizeimg_rect_gray, resizeimg_cir_gray, mask=None)
xor_gray = cv2.bitwise_xor(resizeimg_rect_gray, resizeimg_cir_gray, mask=None)
cv2.imshow("show gray merged ground",and_gray)
cv2.imshow("show gray merged or",or_gray)
cv2.imshow("show gray merged xor",xor_gray)
cv2.waitKey(0)
cv2.destroyAllWindows()
img_bgr = cv2.imread("review_opencv/images/rectangle.jpg", 1)
img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
